# %%
import os
import csv

def generate_csv_binaries(root_dir, csv_file):
    with open(csv_file, 'w', newline='') as csvfile:
        fieldnames = ['package', 'cve', 'arch', 'compiler', 'opt', 'filename', 'path']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for dirpath, dirnames, filenames in os.walk("reduced_dataset"):
            for filename in filenames:
                if filename.endswith(".json"):
                    continue
                args_list = dirpath.split('/')
                arch = args_list[1]
                package = args_list[2]
                cve = args_list[3]
                compiler = args_list[-2].replace("GCC", 'gcc').replace("Clang", 'clang')
                opt = args_list[-1][1:]
                path = os.path.join('/'.join(dirpath.split('/')[1:]), filename)
                writer.writerow({'package': package, 'cve': cve, 'arch': arch, 'compiler': compiler, 'opt': opt, 'filename': filename, 'path': path})

# Example usage:
generate_csv_binaries('./reduced_dataset', 'cve-binaries.csv')
# %%
import os
import csv
import json
from collections import defaultdict
CVE_FUNC_DICT = defaultdict(list)
for dirpath, dirnames, filenames in os.walk("reduced_dataset"):
    for filename in filenames:
        if filename.endswith(".json"):
            args_list = dirpath.split('/')
            cve = args_list[3]
            path = os.path.join(dirpath, filename)
            try:
                cve_func_json = json.load(open(path))
            except:
                # print("Error loading json file: ", path)
                continue
            if CVE_FUNC_DICT[cve] == []:
                for func_name in cve_func_json:
                    CVE_FUNC_DICT[cve].append(func_name)
            else:
                for func_name in cve_func_json:
                    if func_name not in CVE_FUNC_DICT[cve]:
                        print("New function found: ", func_name, " in ", cve)
                        print("Old functions: ", CVE_FUNC_DICT[cve])
                        print("path: ", path)
                        CVE_FUNC_DICT[cve].append(func_name)
# %%
with open('cve-functions.csv', 'w', newline='') as csvfile:
    fieldnames = ['cve', 'function']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    for cve in CVE_FUNC_DICT:
        for func_name in CVE_FUNC_DICT[cve]:
            writer.writerow({'cve': cve, 'function': func_name})
        
# %%
